\b;Instruction \c;continue\n;
Syntax :
\s;\c;while ( condition )
\s;{
\s;	continue;
\s;}
\n;
With this instruction, you can jump over the rest of instructions in the \c;\l;bloc\u cbot\bloc;\n; of a \c;\l;while\u cbot\while;\n; or \c;\l;for\u cbot\for;\n; loop: The execution will resume at the beginning of the bloc, the next time the loop is repeated.
 
Here is an example:
\s;\c;int i = 0;
\s;while ( i < 5 )
\s;{
\s;	i = i+1;
\s;	if ( i == 3 )
\s;	{
\s;		continue;
\s;	}
\s;	\n;Instructions ...\c;
\s;}
\n;
The instructions will only be executed for the values of \c;i\n; 1, 2, 4 and 5.

You can give a loop a label like this:
\s;\c;this_is_a_label: while ( true )
\s;{
\s;	\n;Instructions ...\c;
\s;}
\n;
By default when multiple loops are nested inside one another, this instruction affects the innermost loop. If this is not what you want, you can use a label to tell this instruction which loop it should affect:
\s;\c;string result = "";
\s;foo: for(int outer = 0; outer < 3; ++outer)
\s;{
\s;	result += "A";
\s;	for(int inner = 0; inner < 2; ++inner)
\s;	{
\s;		result += "B";
\s;		if(inner == outer)
\s;		{
\s;			result += "*";
\s;			continue foo;
\s;		}
\s;		result += "C";
\s;	}
\s;	result += "D";
\s;}
\s;message(result);  // Prints: AB*ABCB*ABCBCD
\n;
\t;See also
\l;Programming\u cbot;, \l;types\u cbot\type; and \l;categories\u cbot\category;.
